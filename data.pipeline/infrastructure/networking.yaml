AWSTemplateFormatVersion: '2010-09-09'

Description: >-
  AWS CloudFormation template to provide a dual availability zone VPC, with public and private subnets and internet
  gateway.

# Parameters
# ======================================================================================================================
# No strict value checking here as we assume this is a template used by other templates, so:
# - top level templates will limit the value ranges
# - we don't want to have to update all the nested templates each time we add a new project
Parameters:
  Project:
    Description: Name of project.
    Type:        String
    Default:     loop
    AllowedValues:
    - loop

  Environment:
    Description: >-
      Type of environment: develop[ment], staging, prod[uction].
    Type:        String
    Default:     develop
    AllowedValues:
    - develop
    - staging
    - prod

  AvailabilityZoneALondon:
    Description: First Availability Zone for the subnets instance.
    Type:        String
    Default:     eu-west-2a

  AvailabilityZoneBLondon:
    Description: Second Availability Zone for the subnets instance.
    Type:        String
    Default:     eu-west-2b

# Mappings
# ======================================================================================================================
Mappings:
  CidrBlocks:
    VPC:
      develop: 172.31.0.0/16
      staging: 173.31.0.0/16
      prod:    174.31.0.0/16
    PublicSubnetA:
      develop: 172.31.16.0/20
      staging: 173.31.16.0/20
      prod:    174.31.16.0/20
    PublicSubnetB:
      develop: 172.31.32.0/20
      staging: 173.31.32.0/20
      prod:    174.31.32.0/20
    PrivateSubnetA:
      develop: 172.31.48.0/20
      staging: 173.31.48.0/20
      prod:    174.31.48.0/20
    PrivateSubnetB:
      develop: 172.31.64.0/20
      staging: 173.31.64.0/20
      prod:    174.31.64.0/20

# Outputs
# ======================================================================================================================
Outputs:
  PublicSubnets:
    Description: Public subnet list.
    Value: !Join [',', [!Ref PublicSubnetA, !Ref PublicSubnetB]]
    Export:
      Name: !Join ['-', [!Ref Project, export, subnet, list, public, !Ref Environment]]

  PrivateSubnets:
    Description: Private subnet list.
    Value: !Join [',', [!Ref PrivateSubnetA, !Ref PrivateSubnetB]]
    Export:
      Name: !Join ['-', [!Ref Project, export, subnet, list, private, !Ref Environment]]

  PrivateSubnetSecurityGroups:
    Description: Private subnet security group list.
    Value: !Join [',', [!GetAtt VPC.DefaultSecurityGroup, !Ref TestSecurityGroup]]
    Export:
      Name: !Join ['-', [!Ref Project, export, security-group, list, private, !Ref Environment]]

  VPC:
    Description: VPC for the deployment.
    Value: !Ref VPC
    Export:
      Name: !Join ['-', [!Ref Project, export, vpc, !Ref Environment]]

# Resources
# ======================================================================================================================
Resources:
# VPC
# ----------------------------------------------------------------------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:          !FindInMap [CidrBlocks, VPC, !Ref Environment]
      EnableDnsSupport:   true
      EnableDnsHostnames: true
      InstanceTenancy:    default
      Tags:
      - {Key: Name,        Value: !Join ['-', [!Ref Project, vpc, !Ref Environment]]}
      - {Key: Environment, Value: !Ref Environment}
      - {Key: Project,     Value: !Ref Project}

# Subnets
# ----------------------------------------------------------------------------------------------------------------------
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:    !Ref AvailabilityZoneALondon
      CidrBlock:           !FindInMap [CidrBlocks, PublicSubnetA, !Ref Environment]
      MapPublicIpOnLaunch: false
      VpcId:               !Ref VPC
      Tags:
      - {Key: Name,        Value: !Join ['-', [!Ref Project, subnet, public, a, !Ref Environment]]}
      - {Key: Environment, Value: !Ref Environment}
      - {Key: Project,     Value: !Ref Project}

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:    !Ref AvailabilityZoneBLondon
      CidrBlock:           !FindInMap [CidrBlocks, PublicSubnetB, !Ref Environment]
      MapPublicIpOnLaunch: false
      VpcId:               !Ref VPC
      Tags:
      - {Key: Name,        Value: !Join ['-', [!Ref Project, subnet, public, b, !Ref Environment]]}
      - {Key: Environment, Value: !Ref Environment}
      - {Key: Project,     Value: !Ref Project}

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:    !Ref AvailabilityZoneALondon
      CidrBlock:           !FindInMap [CidrBlocks, PrivateSubnetA, !Ref Environment]
      MapPublicIpOnLaunch: false
      VpcId:               !Ref VPC
      Tags:
      - {Key: Name,        Value: !Join ['-', [!Ref Project, subnet, private, a, !Ref Environment]]}
      - {Key: Environment, Value: !Ref Environment}
      - {Key: Project,     Value: !Ref Project}

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:    !Ref AvailabilityZoneBLondon
      CidrBlock:           !FindInMap [CidrBlocks, PrivateSubnetB, !Ref Environment]
      MapPublicIpOnLaunch: false
      VpcId:               !Ref VPC
      Tags:
      - {Key: Name,        Value: !Join ['-', [!Ref Project, subnet, private, b, !Ref Environment]]}
      - {Key: Environment, Value: !Ref Environment}
      - {Key: Project,     Value: !Ref Project}

# Security Groups
# ----------------------------------------------------------------------------------------------------------------------
  TestSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        Dummy security group as we need to export something for the lambdas to use. Will be replaced when security is
        tightened up.
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - {IpProtocol: TCP, FromPort:   80, ToPort:   80, CidrIp: 54.171.14.166/32} # HTTP
      Tags:
      - {Key: Name,        Value: !Join ['-', [!Ref Project, security-group, test, !Ref Environment]]}
      - {Key: Environment, Value: !Ref Environment}
      - {Key: Project,     Value: !Ref Project}
