AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >-
  AWS CloudFormation template to for Loop data ingestion pipeline

# Parameters
# ----------------------------------------------------------------------------------------------------------------------
Parameters:

  Project:
    Description: Name of project.
    Type:        String
    Default:     loop
    AllowedValues:
    - loop

  Environment:
    Description: >-
      Type of environment: develop[ment], staging, prod[uction] or d[isaster]r[ecovery].
    Type:        String
    Default:     develop
    AllowedValues:
    - develop
    - staging
    - prod
    - dr

  # Note this is effectively read only and includes the project name to avoid unsupported nested Join later
  LambdaLogGroupPrefix:
    Description: Cloudwatch log group string to prepend to the lambda name to form the full log group name.
    Type:        String
    Default:     /aws/lambda/loop
    AllowedValues:
    - /aws/lambda/loop

# Globals
# ----------------------------------------------------------------------------------------------------------------------
Globals:
  Function:
    Runtime:          python3.8
    Handler:          main.lambda_handler
    MemorySize:       1024
    Timeout:          900
    VpcConfig:
      SubnetIds:
        Fn::Split:
        - ','
        - Fn::ImportValue: !Join ['-', [!Ref Project, export, subnet, list, private, !Ref Environment]]
      SecurityGroupIds:
        Fn::Split:
        - ','
        - Fn::ImportValue: !Join ['-', [!Ref Project, export, security-group, list, private, !Ref Environment]]
    Environment:
      Variables:
        ENVIRONMENT:        !Ref Environment
        LOGLEVEL:           "INFO"
        PROJECT:            !Ref Project
    Tags:
      Environment:  !Ref Environment
      Project:      !Ref Project

# Resources
# ----------------------------------------------------------------------------------------------------------------------
Resources:

# Lambdas
# ----------------------------------------------------------------------------------------------------------------------
  UserCreator:
    Type: AWS::Serverless::Function
    Properties:
      Role:             !GetAtt LambdaRole.Arn
      Policies:         AWSLambdaVPCAccessExecutionRole
      FunctionName:     !Join ['-', [!Ref Project, lambda, user-creator, !Ref Environment]]
      Description:      Adds user info to RDS.
      ReservedConcurrentExecutions: 10
      CodeUri:          lambdas/user_creator
      Runtime:      python3.8
      Handler:      main.lambda_handler
      AutoPublishAlias: !Ref Environment
      MemorySize:       2048
      Timeout:      15
      Environment:
        Variables:
          ENVIRONMENT:       !Ref Environment
          LOGLEVEL:          INFO
          PROJECT:           !Ref Project
      Tags:
        Function:       UserCreator
        Name:           !Join ['-', [!Ref Project, lambda, user-creator, !Ref Environment]]
        Environment:    !Ref Environment
        Project:        !Ref Project

  ThumbnailUploader:
    Type: AWS::Serverless::Function
    Properties:
      Role:             !GetAtt LambdaRole.Arn
      Policies:         AWSLambdaVPCAccessExecutionRole
      FunctionName:     !Join ['-', [!Ref Project, lambda, thumbnail-uploader, !Ref Environment]]
      Description:      Uploads restaurant thumbnail to S3.
      ReservedConcurrentExecutions: 10
      CodeUri:          lambdas/restaurant_thumbnail_uploader
      Runtime:      python3.8
      Handler:      main.lambda_handler
      AutoPublishAlias: !Ref Environment
      MemorySize: 512
      Timeout: 10
      Environment:
        Variables:
          ENVIRONMENT:       !Ref Environment
          LOGLEVEL:          INFO
          PROJECT:           !Ref Project
      Tags:
        Function:       ThumbnailUploader
        Name:           !Join ['-', [!Ref Project, lambda, thumbnail-uploader, !Ref Environment]]
        Environment:    !Ref Environment
        Project:        !Ref Project

# S3 Storage
# ----------------------------------------------------------------------------------------------------------------------
  RestaurantThumbnailsS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref Project, s3, restaurant-thumbnail-store, !Ref Environment]]
      LifecycleConfiguration:
        Rules:
          - Id: ExpireThumbnail
            Status: Enabled
            ExpirationInDays: 1
          - Id: DeleteThumbnail
            Status: Enabled
            ExpiredObjectDeleteMarker: true
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1

# Lambda Permissions
# ----------------------------------------------------------------------------------------------------------------------
  CognitoLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt UserCreator.Arn
      Principal: "cognito-idp.amazonaws.com"
      SourceArn:
        Fn::ImportValue:
          !Sub "${Project}-stack-cognito-${Environment}-UserPool-Arn"

# Roles
# ----------------------------------------------------------------------------------------------------------------------
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: 'arn:aws:logs:*:*:*'
      - PolicyName: cloudwatch-put-metric
        PolicyDocument:
          Statement:
          - Action:
            - cloudwatch:PutMetricData
            Effect: Allow
            Resource: '*'
      - PolicyName: ec2-interfaces
        PolicyDocument:
          Statement:
          - Action:
            - ec2:DetachNetworkInterface
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            Effect: Allow
            Resource: '*'
      - PolicyName: s3-loop-restaurant-thumbnail-store
        PolicyDocument:
          Statement:
          - Action:
            - s3:GetObjectVersion
            - s3:ListAllMyBuckets
            - s3:ListBucket
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:GetObject
            - s3:ListBucketMultipartUploads
            - s3:AbortMultipartUpload
            - s3:ListMultipartUploadParts
            Effect: Allow
            Resource:
              - arn:aws:s3:::loop-s3-restaurant-thumbnail-store-develop
              - arn:aws:s3:::loop-s3-restaurant-thumbnail-store-develop/*
              - arn:aws:s3:::loop-s3-restaurant-thumbnail-store-staging
              - arn:aws:s3:::loop-s3-restaurant-thumbnail-store-staging/*
              - arn:aws:s3:::loop-s3-restaurant-thumbnail-store-prod
              - arn:aws:s3:::loop-s3-restaurant-thumbnail-store-prod/*
      - PolicyName: s3-loop-data-license
        PolicyDocument:
          Statement:
          - Action:
            - s3:GetObjectVersion
            - s3:ListAllMyBuckets
            - s3:ListBucket
            - s3:ListBuckets
            - s3:PutObject
            - s3:GetObject
            Effect: Allow
            Resource: '*'

Outputs:
  UserCreatorArn:
    Description: UserCreator ARN.
    Value: !GetAtt UserCreator.Arn
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-UserCreator-Arn'
